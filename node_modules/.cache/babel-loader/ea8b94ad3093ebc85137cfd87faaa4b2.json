{"ast":null,"code":"import { __assign, __extends } from 'tslib';\nimport React from 'react';\nimport normalizeWheel from 'normalize-wheel';\n/**\r\n * Compute the dimension of the crop area based on media size,\r\n * aspect ratio and optionally rotation\r\n */\n\nfunction getCropSize(mediaWidth, mediaHeight, containerWidth, containerHeight, aspect, rotation) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  var _a = rotateSize(mediaWidth, mediaHeight, rotation),\n      width = _a.width,\n      height = _a.height;\n\n  var fittingWidth = Math.min(width, containerWidth);\n  var fittingHeight = Math.min(height, containerHeight);\n\n  if (fittingWidth > fittingHeight * aspect) {\n    return {\n      width: fittingHeight * aspect,\n      height: fittingHeight\n    };\n  }\n\n  return {\n    width: fittingWidth,\n    height: fittingWidth / aspect\n  };\n}\n/**\r\n * Compute media zoom.\r\n * We fit the media into the container with \"max-width: 100%; max-height: 100%;\"\r\n */\n\n\nfunction getMediaZoom(mediaSize) {\n  // Take the axis with more pixels to improve accuracy\n  return mediaSize.width > mediaSize.height ? mediaSize.width / mediaSize.naturalWidth : mediaSize.height / mediaSize.naturalHeight;\n}\n/**\r\n * Ensure a new media position stays in the crop area.\r\n */\n\n\nfunction restrictPosition(position, mediaSize, cropSize, zoom, rotation) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  var _a = rotateSize(mediaSize.width, mediaSize.height, rotation),\n      width = _a.width,\n      height = _a.height;\n\n  return {\n    x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, height, cropSize.height, zoom)\n  };\n}\n\nfunction restrictPositionCoord(position, mediaSize, cropSize, zoom) {\n  var maxPosition = mediaSize * zoom / 2 - cropSize / 2;\n  return clamp(position, -maxPosition, maxPosition);\n}\n\nfunction getDistanceBetweenPoints(pointA, pointB) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2));\n}\n\nfunction getRotationBetweenPoints(pointA, pointB) {\n  return Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180 / Math.PI;\n}\n/**\r\n * Compute the output cropped area of the media in percentages and pixels.\r\n * x/y are the top-left coordinates on the src media\r\n */\n\n\nfunction computeCroppedArea(crop, mediaSize, cropSize, aspect, zoom, rotation, restrictPosition) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  if (restrictPosition === void 0) {\n    restrictPosition = true;\n  } // if the media is rotated by the user, we cannot limit the position anymore\n  // as it might need to be negative.\n\n\n  var limitAreaFn = restrictPosition ? limitArea : noOp;\n  var mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation);\n  var mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation); // calculate the crop area in percentages\n  // in the rotated space\n\n  var croppedAreaPercentages = {\n    x: limitAreaFn(100, ((mediaBBoxSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaBBoxSize.width * 100),\n    y: limitAreaFn(100, ((mediaBBoxSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) / mediaBBoxSize.height * 100),\n    width: limitAreaFn(100, cropSize.width / mediaBBoxSize.width * 100 / zoom),\n    height: limitAreaFn(100, cropSize.height / mediaBBoxSize.height * 100 / zoom)\n  }; // we compute the pixels size naively\n\n  var widthInPixels = Math.round(limitAreaFn(mediaNaturalBBoxSize.width, croppedAreaPercentages.width * mediaNaturalBBoxSize.width / 100));\n  var heightInPixels = Math.round(limitAreaFn(mediaNaturalBBoxSize.height, croppedAreaPercentages.height * mediaNaturalBBoxSize.height / 100));\n  var isImgWiderThanHigh = mediaNaturalBBoxSize.width >= mediaNaturalBBoxSize.height * aspect; // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n  // if the media is wider than high, when zoom is 0, the crop height will be equals to image height\n  // thus we want to compute the width from the height and aspect for accuracy.\n  // Otherwise, we compute the height from width and aspect.\n\n  var sizePixels = isImgWiderThanHigh ? {\n    width: Math.round(heightInPixels * aspect),\n    height: heightInPixels\n  } : {\n    width: widthInPixels,\n    height: Math.round(widthInPixels / aspect)\n  };\n\n  var croppedAreaPixels = __assign(__assign({}, sizePixels), {\n    x: Math.round(limitAreaFn(mediaNaturalBBoxSize.width - sizePixels.width, croppedAreaPercentages.x * mediaNaturalBBoxSize.width / 100)),\n    y: Math.round(limitAreaFn(mediaNaturalBBoxSize.height - sizePixels.height, croppedAreaPercentages.y * mediaNaturalBBoxSize.height / 100))\n  });\n\n  return {\n    croppedAreaPercentages: croppedAreaPercentages,\n    croppedAreaPixels: croppedAreaPixels\n  };\n}\n/**\r\n * Ensure the returned value is between 0 and max\r\n */\n\n\nfunction limitArea(max, value) {\n  return Math.min(max, Math.max(0, value));\n}\n\nfunction noOp(_max, value) {\n  return value;\n}\n/**\r\n * Compute crop and zoom from the croppedAreaPercentages.\r\n */\n\n\nfunction getInitialCropFromCroppedAreaPercentages(croppedAreaPercentages, mediaSize, rotation, cropSize, minZoom, maxZoom) {\n  var mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation); // This is the inverse process of computeCroppedArea\n\n  var zoom = clamp(cropSize.width / mediaBBoxSize.width * (100 / croppedAreaPercentages.width), minZoom, maxZoom);\n  var crop = {\n    x: zoom * mediaBBoxSize.width / 2 - cropSize.width / 2 - mediaBBoxSize.width * zoom * (croppedAreaPercentages.x / 100),\n    y: zoom * mediaBBoxSize.height / 2 - cropSize.height / 2 - mediaBBoxSize.height * zoom * (croppedAreaPercentages.y / 100)\n  };\n  return {\n    crop: crop,\n    zoom: zoom\n  };\n}\n/**\r\n * Compute zoom from the croppedAreaPixels\r\n */\n\n\nfunction getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize) {\n  var mediaZoom = getMediaZoom(mediaSize);\n  return cropSize.height > cropSize.width ? cropSize.height / (croppedAreaPixels.height * mediaZoom) : cropSize.width / (croppedAreaPixels.width * mediaZoom);\n}\n/**\r\n * Compute crop and zoom from the croppedAreaPixels\r\n */\n\n\nfunction getInitialCropFromCroppedAreaPixels(croppedAreaPixels, mediaSize, rotation, cropSize, minZoom, maxZoom) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  var mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation);\n  var zoom = clamp(getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize), minZoom, maxZoom);\n  var cropZoom = cropSize.height > cropSize.width ? cropSize.height / croppedAreaPixels.height : cropSize.width / croppedAreaPixels.width;\n  var crop = {\n    x: ((mediaNaturalBBoxSize.width - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n    y: ((mediaNaturalBBoxSize.height - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) * cropZoom\n  };\n  return {\n    crop: crop,\n    zoom: zoom\n  };\n}\n/**\r\n * Return the point that is the center of point a and b\r\n */\n\n\nfunction getCenter(a, b) {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2\n  };\n}\n\nfunction getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\n/**\r\n * Returns the new bounding area of a rotated rectangle.\r\n */\n\n\nfunction rotateSize(width, height, rotation) {\n  var rotRad = getRadianAngle(rotation);\n  return {\n    width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height)\n  };\n}\n/**\r\n * Clamp value between min and max\r\n */\n\n\nfunction clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n/**\r\n * Combine multiple class names into a single string.\r\n */\n\n\nfunction classNames() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.filter(function (value) {\n    if (typeof value === 'string' && value.length > 0) {\n      return true;\n    }\n\n    return false;\n  }).join(' ').trim();\n}\n\nvar css_248z = \".reactEasyCrop_Container {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  overflow: hidden;\\n  user-select: none;\\n  touch-action: none;\\n  cursor: move;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.reactEasyCrop_Image,\\n.reactEasyCrop_Video {\\n  will-change: transform; /* this improves performances and prevent painting issues on iOS Chrome */\\n}\\n\\n.reactEasyCrop_Contain {\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: auto;\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n}\\n.reactEasyCrop_Cover_Horizontal {\\n  width: 100%;\\n  height: auto;\\n}\\n.reactEasyCrop_Cover_Vertical {\\n  width: auto;\\n  height: 100%;\\n}\\n\\n.reactEasyCrop_CropArea {\\n  position: absolute;\\n  left: 50%;\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  box-sizing: border-box;\\n  box-shadow: 0 0 0 9999em;\\n  color: rgba(0, 0, 0, 0.5);\\n  overflow: hidden;\\n}\\n\\n.reactEasyCrop_CropAreaRound {\\n  border-radius: 50%;\\n}\\n\\n.reactEasyCrop_CropAreaGrid::before {\\n  content: ' ';\\n  box-sizing: border-box;\\n  position: absolute;\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  top: 0;\\n  bottom: 0;\\n  left: 33.33%;\\n  right: 33.33%;\\n  border-top: 0;\\n  border-bottom: 0;\\n}\\n\\n.reactEasyCrop_CropAreaGrid::after {\\n  content: ' ';\\n  box-sizing: border-box;\\n  position: absolute;\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  top: 33.33%;\\n  bottom: 33.33%;\\n  left: 0;\\n  right: 0;\\n  border-left: 0;\\n  border-right: 0;\\n}\\n\";\nvar MIN_ZOOM = 1;\nvar MAX_ZOOM = 3;\n\nvar Cropper =\n/** @class */\nfunction (_super) {\n  __extends(Cropper, _super);\n\n  function Cropper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.imageRef = null;\n    _this.videoRef = null;\n    _this.containerRef = null;\n    _this.styleRef = null;\n    _this.containerRect = null;\n    _this.mediaSize = {\n      width: 0,\n      height: 0,\n      naturalWidth: 0,\n      naturalHeight: 0\n    };\n    _this.dragStartPosition = {\n      x: 0,\n      y: 0\n    };\n    _this.dragStartCrop = {\n      x: 0,\n      y: 0\n    };\n    _this.lastPinchDistance = 0;\n    _this.lastPinchRotation = 0;\n    _this.rafDragTimeout = null;\n    _this.rafPinchTimeout = null;\n    _this.wheelTimer = null;\n    _this.state = {\n      cropSize: null,\n      hasWheelJustStarted: false\n    }; // this is to prevent Safari on iOS >= 10 to zoom the page\n\n    _this.preventZoomSafari = function (e) {\n      return e.preventDefault();\n    };\n\n    _this.cleanEvents = function () {\n      document.removeEventListener('mousemove', _this.onMouseMove);\n      document.removeEventListener('mouseup', _this.onDragStopped);\n      document.removeEventListener('touchmove', _this.onTouchMove);\n      document.removeEventListener('touchend', _this.onDragStopped);\n    };\n\n    _this.clearScrollEvent = function () {\n      if (_this.containerRef) _this.containerRef.removeEventListener('wheel', _this.onWheel);\n\n      if (_this.wheelTimer) {\n        clearTimeout(_this.wheelTimer);\n      }\n    };\n\n    _this.onMediaLoad = function () {\n      var cropSize = _this.computeSizes();\n\n      if (cropSize) {\n        _this.emitCropData();\n\n        _this.setInitialCrop(cropSize);\n      }\n\n      if (_this.props.onMediaLoaded) {\n        _this.props.onMediaLoaded(_this.mediaSize);\n      }\n    };\n\n    _this.setInitialCrop = function (cropSize) {\n      if (_this.props.initialCroppedAreaPercentages) {\n        var _a = getInitialCropFromCroppedAreaPercentages(_this.props.initialCroppedAreaPercentages, _this.mediaSize, _this.props.rotation, cropSize, _this.props.minZoom, _this.props.maxZoom),\n            crop = _a.crop,\n            zoom = _a.zoom;\n\n        _this.props.onCropChange(crop);\n\n        _this.props.onZoomChange && _this.props.onZoomChange(zoom);\n      } else if (_this.props.initialCroppedAreaPixels) {\n        var _b = getInitialCropFromCroppedAreaPixels(_this.props.initialCroppedAreaPixels, _this.mediaSize, _this.props.rotation, cropSize, _this.props.minZoom, _this.props.maxZoom),\n            crop = _b.crop,\n            zoom = _b.zoom;\n\n        _this.props.onCropChange(crop);\n\n        _this.props.onZoomChange && _this.props.onZoomChange(zoom);\n      }\n    };\n\n    _this.computeSizes = function () {\n      var _a, _b, _c, _d, _e, _f;\n\n      var mediaRef = _this.imageRef || _this.videoRef;\n\n      if (mediaRef && _this.containerRef) {\n        _this.containerRect = _this.containerRef.getBoundingClientRect();\n        var containerAspect = _this.containerRect.width / _this.containerRect.height;\n        var naturalWidth = ((_a = _this.imageRef) === null || _a === void 0 ? void 0 : _a.naturalWidth) || ((_b = _this.videoRef) === null || _b === void 0 ? void 0 : _b.videoWidth) || 0;\n        var naturalHeight = ((_c = _this.imageRef) === null || _c === void 0 ? void 0 : _c.naturalHeight) || ((_d = _this.videoRef) === null || _d === void 0 ? void 0 : _d.videoHeight) || 0;\n        var isMediaScaledDown = mediaRef.offsetWidth < naturalWidth || mediaRef.offsetHeight < naturalHeight;\n        var mediaAspect = naturalWidth / naturalHeight; // We do not rely on the offsetWidth/offsetHeight if the media is scaled down\n        // as the values they report are rounded. That will result in precision losses\n        // when calculating zoom. We use the fact that the media is positionned relative\n        // to the container. That allows us to use the container's dimensions\n        // and natural aspect ratio of the media to calculate accurate media size.\n        // However, for this to work, the container should not be rotated\n\n        var renderedMediaSize = void 0;\n\n        if (isMediaScaledDown) {\n          switch (_this.props.objectFit) {\n            default:\n            case 'contain':\n              renderedMediaSize = containerAspect > mediaAspect ? {\n                width: _this.containerRect.height * mediaAspect,\n                height: _this.containerRect.height\n              } : {\n                width: _this.containerRect.width,\n                height: _this.containerRect.width / mediaAspect\n              };\n              break;\n\n            case 'horizontal-cover':\n              renderedMediaSize = {\n                width: _this.containerRect.width,\n                height: _this.containerRect.width / mediaAspect\n              };\n              break;\n\n            case 'vertical-cover':\n              renderedMediaSize = {\n                width: _this.containerRect.height * mediaAspect,\n                height: _this.containerRect.height\n              };\n              break;\n          }\n        } else {\n          renderedMediaSize = {\n            width: mediaRef.offsetWidth,\n            height: mediaRef.offsetHeight\n          };\n        }\n\n        _this.mediaSize = __assign(__assign({}, renderedMediaSize), {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight\n        });\n        var cropSize = _this.props.cropSize ? _this.props.cropSize : getCropSize(_this.mediaSize.width, _this.mediaSize.height, _this.containerRect.width, _this.containerRect.height, _this.props.aspect, _this.props.rotation);\n\n        if (((_e = _this.state.cropSize) === null || _e === void 0 ? void 0 : _e.height) !== cropSize.height || ((_f = _this.state.cropSize) === null || _f === void 0 ? void 0 : _f.width) !== cropSize.width) {\n          _this.props.onCropSizeChange && _this.props.onCropSizeChange(cropSize);\n        }\n\n        _this.setState({\n          cropSize: cropSize\n        }, _this.recomputeCropPosition);\n\n        return cropSize;\n      }\n    };\n\n    _this.onMouseDown = function (e) {\n      e.preventDefault();\n      document.addEventListener('mousemove', _this.onMouseMove);\n      document.addEventListener('mouseup', _this.onDragStopped);\n\n      _this.onDragStart(Cropper.getMousePoint(e));\n    };\n\n    _this.onMouseMove = function (e) {\n      return _this.onDrag(Cropper.getMousePoint(e));\n    };\n\n    _this.onTouchStart = function (e) {\n      document.addEventListener('touchmove', _this.onTouchMove, {\n        passive: false\n      }); // iOS 11 now defaults to passive: true\n\n      document.addEventListener('touchend', _this.onDragStopped);\n\n      if (e.touches.length === 2) {\n        _this.onPinchStart(e);\n      } else if (e.touches.length === 1) {\n        _this.onDragStart(Cropper.getTouchPoint(e.touches[0]));\n      }\n    };\n\n    _this.onTouchMove = function (e) {\n      // Prevent whole page from scrolling on iOS.\n      e.preventDefault();\n\n      if (e.touches.length === 2) {\n        _this.onPinchMove(e);\n      } else if (e.touches.length === 1) {\n        _this.onDrag(Cropper.getTouchPoint(e.touches[0]));\n      }\n    };\n\n    _this.onDragStart = function (_a) {\n      var _b, _c;\n\n      var x = _a.x,\n          y = _a.y;\n      _this.dragStartPosition = {\n        x: x,\n        y: y\n      };\n      _this.dragStartCrop = __assign({}, _this.props.crop);\n      (_c = (_b = _this.props).onInteractionStart) === null || _c === void 0 ? void 0 : _c.call(_b);\n    };\n\n    _this.onDrag = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n      if (_this.rafDragTimeout) window.cancelAnimationFrame(_this.rafDragTimeout);\n      _this.rafDragTimeout = window.requestAnimationFrame(function () {\n        if (!_this.state.cropSize) return;\n        if (x === undefined || y === undefined) return;\n        var offsetX = x - _this.dragStartPosition.x;\n        var offsetY = y - _this.dragStartPosition.y;\n        var requestedPosition = {\n          x: _this.dragStartCrop.x + offsetX,\n          y: _this.dragStartCrop.y + offsetY\n        };\n        var newPosition = _this.props.restrictPosition ? restrictPosition(requestedPosition, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : requestedPosition;\n\n        _this.props.onCropChange(newPosition);\n      });\n    };\n\n    _this.onDragStopped = function () {\n      var _a, _b;\n\n      _this.cleanEvents();\n\n      _this.emitCropData();\n\n      (_b = (_a = _this.props).onInteractionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n\n    _this.onWheel = function (e) {\n      e.preventDefault();\n      var point = Cropper.getMousePoint(e);\n      var pixelY = normalizeWheel(e).pixelY;\n      var newZoom = _this.props.zoom - pixelY * _this.props.zoomSpeed / 200;\n\n      _this.setNewZoom(newZoom, point);\n\n      if (!_this.state.hasWheelJustStarted) {\n        _this.setState({\n          hasWheelJustStarted: true\n        }, function () {\n          var _a, _b;\n\n          return (_b = (_a = _this.props).onInteractionStart) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n      }\n\n      if (_this.wheelTimer) {\n        clearTimeout(_this.wheelTimer);\n      }\n\n      _this.wheelTimer = window.setTimeout(function () {\n        return _this.setState({\n          hasWheelJustStarted: false\n        }, function () {\n          var _a, _b;\n\n          return (_b = (_a = _this.props).onInteractionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n      }, 250);\n    };\n\n    _this.getPointOnContainer = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n\n      if (!_this.containerRect) {\n        throw new Error('The Cropper is not mounted');\n      }\n\n      return {\n        x: _this.containerRect.width / 2 - (x - _this.containerRect.left),\n        y: _this.containerRect.height / 2 - (y - _this.containerRect.top)\n      };\n    };\n\n    _this.getPointOnMedia = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n      var _b = _this.props,\n          crop = _b.crop,\n          zoom = _b.zoom;\n      return {\n        x: (x + crop.x) / zoom,\n        y: (y + crop.y) / zoom\n      };\n    };\n\n    _this.setNewZoom = function (zoom, point) {\n      if (!_this.state.cropSize || !_this.props.onZoomChange) return;\n\n      var zoomPoint = _this.getPointOnContainer(point);\n\n      var zoomTarget = _this.getPointOnMedia(zoomPoint);\n\n      var newZoom = clamp(zoom, _this.props.minZoom, _this.props.maxZoom);\n      var requestedPosition = {\n        x: zoomTarget.x * newZoom - zoomPoint.x,\n        y: zoomTarget.y * newZoom - zoomPoint.y\n      };\n      var newPosition = _this.props.restrictPosition ? restrictPosition(requestedPosition, _this.mediaSize, _this.state.cropSize, newZoom, _this.props.rotation) : requestedPosition;\n\n      _this.props.onCropChange(newPosition);\n\n      _this.props.onZoomChange(newZoom);\n    };\n\n    _this.getCropData = function () {\n      if (!_this.state.cropSize) {\n        return null;\n      } // this is to ensure the crop is correctly restricted after a zoom back (https://github.com/ricardo-ch/react-easy-crop/issues/6)\n\n\n      var restrictedPosition = _this.props.restrictPosition ? restrictPosition(_this.props.crop, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : _this.props.crop;\n      return computeCroppedArea(restrictedPosition, _this.mediaSize, _this.state.cropSize, _this.getAspect(), _this.props.zoom, _this.props.rotation, _this.props.restrictPosition);\n    };\n\n    _this.emitCropData = function () {\n      var cropData = _this.getCropData();\n\n      if (!cropData) return;\n      var croppedAreaPercentages = cropData.croppedAreaPercentages,\n          croppedAreaPixels = cropData.croppedAreaPixels;\n\n      if (_this.props.onCropComplete) {\n        _this.props.onCropComplete(croppedAreaPercentages, croppedAreaPixels);\n      }\n\n      if (_this.props.onCropAreaChange) {\n        _this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels);\n      }\n    };\n\n    _this.emitCropAreaChange = function () {\n      var cropData = _this.getCropData();\n\n      if (!cropData) return;\n      var croppedAreaPercentages = cropData.croppedAreaPercentages,\n          croppedAreaPixels = cropData.croppedAreaPixels;\n\n      if (_this.props.onCropAreaChange) {\n        _this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels);\n      }\n    };\n\n    _this.recomputeCropPosition = function () {\n      if (!_this.state.cropSize) return;\n      var newPosition = _this.props.restrictPosition ? restrictPosition(_this.props.crop, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : _this.props.crop;\n\n      _this.props.onCropChange(newPosition);\n\n      _this.emitCropData();\n    };\n\n    return _this;\n  }\n\n  Cropper.prototype.componentDidMount = function () {\n    window.addEventListener('resize', this.computeSizes);\n\n    if (this.containerRef) {\n      this.props.zoomWithScroll && this.containerRef.addEventListener('wheel', this.onWheel, {\n        passive: false\n      });\n      this.containerRef.addEventListener('gesturestart', this.preventZoomSafari);\n      this.containerRef.addEventListener('gesturechange', this.preventZoomSafari);\n    }\n\n    if (!this.props.disableAutomaticStylesInjection) {\n      this.styleRef = document.createElement('style');\n      this.styleRef.setAttribute('type', 'text/css');\n      this.styleRef.innerHTML = css_248z;\n      document.head.appendChild(this.styleRef);\n    } // when rendered via SSR, the image can already be loaded and its onLoad callback will never be called\n\n\n    if (this.imageRef && this.imageRef.complete) {\n      this.onMediaLoad();\n    }\n  };\n\n  Cropper.prototype.componentWillUnmount = function () {\n    var _a;\n\n    window.removeEventListener('resize', this.computeSizes);\n\n    if (this.containerRef) {\n      this.containerRef.removeEventListener('gesturestart', this.preventZoomSafari);\n      this.containerRef.removeEventListener('gesturechange', this.preventZoomSafari);\n    }\n\n    if (this.styleRef) {\n      (_a = this.styleRef.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.styleRef);\n    }\n\n    this.cleanEvents();\n    this.props.zoomWithScroll && this.clearScrollEvent();\n  };\n\n  Cropper.prototype.componentDidUpdate = function (prevProps) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    if (prevProps.rotation !== this.props.rotation) {\n      this.computeSizes();\n      this.recomputeCropPosition();\n    } else if (prevProps.aspect !== this.props.aspect) {\n      this.computeSizes();\n    } else if (prevProps.zoom !== this.props.zoom) {\n      this.recomputeCropPosition();\n    } else if (((_a = prevProps.cropSize) === null || _a === void 0 ? void 0 : _a.height) !== ((_b = this.props.cropSize) === null || _b === void 0 ? void 0 : _b.height) || ((_c = prevProps.cropSize) === null || _c === void 0 ? void 0 : _c.width) !== ((_d = this.props.cropSize) === null || _d === void 0 ? void 0 : _d.width)) {\n      this.computeSizes();\n    } else if (((_e = prevProps.crop) === null || _e === void 0 ? void 0 : _e.x) !== ((_f = this.props.crop) === null || _f === void 0 ? void 0 : _f.x) || ((_g = prevProps.crop) === null || _g === void 0 ? void 0 : _g.y) !== ((_h = this.props.crop) === null || _h === void 0 ? void 0 : _h.y)) {\n      this.emitCropAreaChange();\n    }\n\n    if (prevProps.zoomWithScroll !== this.props.zoomWithScroll && this.containerRef) {\n      this.props.zoomWithScroll ? this.containerRef.addEventListener('wheel', this.onWheel, {\n        passive: false\n      }) : this.clearScrollEvent();\n    }\n\n    if (prevProps.video !== this.props.video) {\n      (_j = this.videoRef) === null || _j === void 0 ? void 0 : _j.load();\n    }\n  };\n\n  Cropper.prototype.getAspect = function () {\n    var _a = this.props,\n        cropSize = _a.cropSize,\n        aspect = _a.aspect;\n\n    if (cropSize) {\n      return cropSize.width / cropSize.height;\n    }\n\n    return aspect;\n  };\n\n  Cropper.prototype.onPinchStart = function (e) {\n    var pointA = Cropper.getTouchPoint(e.touches[0]);\n    var pointB = Cropper.getTouchPoint(e.touches[1]);\n    this.lastPinchDistance = getDistanceBetweenPoints(pointA, pointB);\n    this.lastPinchRotation = getRotationBetweenPoints(pointA, pointB);\n    this.onDragStart(getCenter(pointA, pointB));\n  };\n\n  Cropper.prototype.onPinchMove = function (e) {\n    var _this = this;\n\n    var pointA = Cropper.getTouchPoint(e.touches[0]);\n    var pointB = Cropper.getTouchPoint(e.touches[1]);\n    var center = getCenter(pointA, pointB);\n    this.onDrag(center);\n    if (this.rafPinchTimeout) window.cancelAnimationFrame(this.rafPinchTimeout);\n    this.rafPinchTimeout = window.requestAnimationFrame(function () {\n      var distance = getDistanceBetweenPoints(pointA, pointB);\n      var newZoom = _this.props.zoom * (distance / _this.lastPinchDistance);\n\n      _this.setNewZoom(newZoom, center);\n\n      _this.lastPinchDistance = distance;\n      var rotation = getRotationBetweenPoints(pointA, pointB);\n      var newRotation = _this.props.rotation + (rotation - _this.lastPinchRotation);\n      _this.props.onRotationChange && _this.props.onRotationChange(newRotation);\n      _this.lastPinchRotation = rotation;\n    });\n  };\n\n  Cropper.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        image = _a.image,\n        video = _a.video,\n        mediaProps = _a.mediaProps,\n        transform = _a.transform,\n        _b = _a.crop,\n        x = _b.x,\n        y = _b.y,\n        rotation = _a.rotation,\n        zoom = _a.zoom,\n        cropShape = _a.cropShape,\n        showGrid = _a.showGrid,\n        _c = _a.style,\n        containerStyle = _c.containerStyle,\n        cropAreaStyle = _c.cropAreaStyle,\n        mediaStyle = _c.mediaStyle,\n        _d = _a.classes,\n        containerClassName = _d.containerClassName,\n        cropAreaClassName = _d.cropAreaClassName,\n        mediaClassName = _d.mediaClassName,\n        objectFit = _a.objectFit;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onMouseDown: this.onMouseDown,\n      onTouchStart: this.onTouchStart,\n      ref: function ref(el) {\n        return _this.containerRef = el;\n      },\n      \"data-testid\": \"container\",\n      style: containerStyle,\n      className: classNames('reactEasyCrop_Container', containerClassName)\n    }, image ? /*#__PURE__*/React.createElement(\"img\", __assign({\n      alt: \"\",\n      className: classNames('reactEasyCrop_Image', objectFit === 'contain' && 'reactEasyCrop_Contain', objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal', objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical', mediaClassName)\n    }, mediaProps, {\n      src: image,\n      ref: function ref(el) {\n        return _this.imageRef = el;\n      },\n      style: __assign(__assign({}, mediaStyle), {\n        transform: transform || \"translate(\" + x + \"px, \" + y + \"px) rotate(\" + rotation + \"deg) scale(\" + zoom + \")\"\n      }),\n      onLoad: this.onMediaLoad\n    })) : video && /*#__PURE__*/React.createElement(\"video\", __assign({\n      autoPlay: true,\n      loop: true,\n      muted: true,\n      className: classNames('reactEasyCrop_Video', objectFit === 'contain' && 'reactEasyCrop_Contain', objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal', objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical', mediaClassName)\n    }, mediaProps, {\n      ref: function ref(el) {\n        return _this.videoRef = el;\n      },\n      onLoadedMetadata: this.onMediaLoad,\n      style: __assign(__assign({}, mediaStyle), {\n        transform: transform || \"translate(\" + x + \"px, \" + y + \"px) rotate(\" + rotation + \"deg) scale(\" + zoom + \")\"\n      }),\n      controls: false\n    }), (Array.isArray(video) ? video : [{\n      src: video\n    }]).map(function (item) {\n      return /*#__PURE__*/React.createElement(\"source\", __assign({\n        key: item.src\n      }, item));\n    })), this.state.cropSize && /*#__PURE__*/React.createElement(\"div\", {\n      style: __assign(__assign({}, cropAreaStyle), {\n        width: this.state.cropSize.width,\n        height: this.state.cropSize.height\n      }),\n      \"data-testid\": \"cropper\",\n      className: classNames('reactEasyCrop_CropArea', cropShape === 'round' && 'reactEasyCrop_CropAreaRound', showGrid && 'reactEasyCrop_CropAreaGrid', cropAreaClassName)\n    }));\n  };\n\n  Cropper.defaultProps = {\n    zoom: 1,\n    rotation: 0,\n    aspect: 4 / 3,\n    maxZoom: MAX_ZOOM,\n    minZoom: MIN_ZOOM,\n    cropShape: 'rect',\n    objectFit: 'contain',\n    showGrid: true,\n    style: {},\n    classes: {},\n    mediaProps: {},\n    zoomSpeed: 1,\n    restrictPosition: true,\n    zoomWithScroll: true\n  };\n\n  Cropper.getMousePoint = function (e) {\n    return {\n      x: Number(e.clientX),\n      y: Number(e.clientY)\n    };\n  };\n\n  Cropper.getTouchPoint = function (touch) {\n    return {\n      x: Number(touch.clientX),\n      y: Number(touch.clientY)\n    };\n  };\n\n  return Cropper;\n}(React.Component);\n\nexport default Cropper;","map":{"version":3,"sources":["../src/helpers.ts","../src/index.tsx"],"names":["getCropSize","mediaWidth","mediaHeight","containerWidth","containerHeight","aspect","width","height","rotateSize","fittingWidth","Math","fittingHeight","getMediaZoom","mediaSize","restrictPosition","position","cropSize","zoom","x","restrictPositionCoord","y","maxPosition","clamp","getDistanceBetweenPoints","pointA","pointB","getRotationBetweenPoints","computeCroppedArea","crop","limitAreaFn","mediaBBoxSize","mediaNaturalBBoxSize","croppedAreaPercentages","widthInPixels","heightInPixels","isImgWiderThanHigh","sizePixels","croppedAreaPixels","getInitialCropFromCroppedAreaPercentages","rotation","minZoom","maxZoom","mediaZoom","getInitialCropFromCroppedAreaPixels","getZoomFromCroppedAreaPixels","cropZoom","getCenter","a","b","getRadianAngle","degreeValue","rotRad","value","min","max","classNames","MIN_ZOOM","MAX_ZOOM","__extends","Component","Cropper","cropShape","objectFit","showGrid","style","classes","mediaProps","zoomSpeed","zoomWithScroll","_this","naturalWidth","naturalHeight","hasWheelJustStarted","window","passive","document","removeChild","prevProps","clearTimeout","mediaRef","containerAspect","imageRef","videoRef","isMediaScaledDown","mediaAspect","renderedMediaSize","offsetHeight","Number","e","touch","offsetX","offsetY","requestedPosition","newPosition","center","distance","newZoom","newRotation","point","normalizeWheel","pixelY","onInteractionStart","onInteractionEnd","zoomPoint","zoomTarget","restrictedPosition","cropData","image","video","transform","_b","_c","containerStyle","cropAreaStyle","mediaStyle","_d","containerClassName","cropAreaClassName","mediaClassName","onMouseDown","onTouchStart","ref","className","alt","src","onLoad","onMediaLoad","autoPlay","loop","muted","onLoadedMetadata","controls","Array","key","item"],"mappings":"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","sourcesContent":["import { Area, MediaSize, Point, Size } from './types'\n\n/**\n * Compute the dimension of the crop area based on media size,\n * aspect ratio and optionally rotation\n */\nexport function getCropSize(\n  mediaWidth: number,\n  mediaHeight: number,\n  containerWidth: number,\n  containerHeight: number,\n  aspect: number,\n  rotation = 0\n): Size {\n  const { width, height } = rotateSize(mediaWidth, mediaHeight, rotation)\n  const fittingWidth = Math.min(width, containerWidth)\n  const fittingHeight = Math.min(height, containerHeight)\n\n  if (fittingWidth > fittingHeight * aspect) {\n    return {\n      width: fittingHeight * aspect,\n      height: fittingHeight,\n    }\n  }\n\n  return {\n    width: fittingWidth,\n    height: fittingWidth / aspect,\n  }\n}\n\n/**\n * Compute media zoom.\n * We fit the media into the container with \"max-width: 100%; max-height: 100%;\"\n */\nexport function getMediaZoom(mediaSize: MediaSize) {\n  // Take the axis with more pixels to improve accuracy\n  return mediaSize.width > mediaSize.height\n    ? mediaSize.width / mediaSize.naturalWidth\n    : mediaSize.height / mediaSize.naturalHeight\n}\n\n/**\n * Ensure a new media position stays in the crop area.\n */\nexport function restrictPosition(\n  position: Point,\n  mediaSize: Size,\n  cropSize: Size,\n  zoom: number,\n  rotation = 0\n): Point {\n  const { width, height } = rotateSize(mediaSize.width, mediaSize.height, rotation)\n\n  return {\n    x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, height, cropSize.height, zoom),\n  }\n}\n\nfunction restrictPositionCoord(\n  position: number,\n  mediaSize: number,\n  cropSize: number,\n  zoom: number\n): number {\n  const maxPosition = (mediaSize * zoom) / 2 - cropSize / 2\n\n  return clamp(position, -maxPosition, maxPosition)\n}\n\nexport function getDistanceBetweenPoints(pointA: Point, pointB: Point) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2))\n}\n\nexport function getRotationBetweenPoints(pointA: Point, pointB: Point) {\n  return (Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180) / Math.PI\n}\n\n/**\n * Compute the output cropped area of the media in percentages and pixels.\n * x/y are the top-left coordinates on the src media\n */\nexport function computeCroppedArea(\n  crop: Point,\n  mediaSize: MediaSize,\n  cropSize: Size,\n  aspect: number,\n  zoom: number,\n  rotation = 0,\n  restrictPosition = true\n): { croppedAreaPercentages: Area; croppedAreaPixels: Area } {\n  // if the media is rotated by the user, we cannot limit the position anymore\n  // as it might need to be negative.\n  const limitAreaFn = restrictPosition ? limitArea : noOp\n\n  const mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation)\n  const mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation)\n\n  // calculate the crop area in percentages\n  // in the rotated space\n  const croppedAreaPercentages = {\n    x: limitAreaFn(\n      100,\n      (((mediaBBoxSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaBBoxSize.width) *\n        100\n    ),\n    y: limitAreaFn(\n      100,\n      (((mediaBBoxSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) /\n        mediaBBoxSize.height) *\n        100\n    ),\n    width: limitAreaFn(100, ((cropSize.width / mediaBBoxSize.width) * 100) / zoom),\n    height: limitAreaFn(100, ((cropSize.height / mediaBBoxSize.height) * 100) / zoom),\n  }\n\n  // we compute the pixels size naively\n  const widthInPixels = Math.round(\n    limitAreaFn(\n      mediaNaturalBBoxSize.width,\n      (croppedAreaPercentages.width * mediaNaturalBBoxSize.width) / 100\n    )\n  )\n  const heightInPixels = Math.round(\n    limitAreaFn(\n      mediaNaturalBBoxSize.height,\n      (croppedAreaPercentages.height * mediaNaturalBBoxSize.height) / 100\n    )\n  )\n  const isImgWiderThanHigh = mediaNaturalBBoxSize.width >= mediaNaturalBBoxSize.height * aspect\n\n  // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n  // if the media is wider than high, when zoom is 0, the crop height will be equals to image height\n  // thus we want to compute the width from the height and aspect for accuracy.\n  // Otherwise, we compute the height from width and aspect.\n  const sizePixels = isImgWiderThanHigh\n    ? {\n        width: Math.round(heightInPixels * aspect),\n        height: heightInPixels,\n      }\n    : {\n        width: widthInPixels,\n        height: Math.round(widthInPixels / aspect),\n      }\n\n  const croppedAreaPixels = {\n    ...sizePixels,\n    x: Math.round(\n      limitAreaFn(\n        mediaNaturalBBoxSize.width - sizePixels.width,\n        (croppedAreaPercentages.x * mediaNaturalBBoxSize.width) / 100\n      )\n    ),\n    y: Math.round(\n      limitAreaFn(\n        mediaNaturalBBoxSize.height - sizePixels.height,\n        (croppedAreaPercentages.y * mediaNaturalBBoxSize.height) / 100\n      )\n    ),\n  }\n\n  return { croppedAreaPercentages, croppedAreaPixels }\n}\n\n/**\n * Ensure the returned value is between 0 and max\n */\nfunction limitArea(max: number, value: number): number {\n  return Math.min(max, Math.max(0, value))\n}\n\nfunction noOp(_max: number, value: number) {\n  return value\n}\n\n/**\n * Compute crop and zoom from the croppedAreaPercentages.\n */\nexport function getInitialCropFromCroppedAreaPercentages(\n  croppedAreaPercentages: Area,\n  mediaSize: MediaSize,\n  rotation: number,\n  cropSize: Size,\n  minZoom: number,\n  maxZoom: number\n) {\n  const mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation)\n\n  // This is the inverse process of computeCroppedArea\n  const zoom = clamp(\n    (cropSize.width / mediaBBoxSize.width) * (100 / croppedAreaPercentages.width),\n    minZoom,\n    maxZoom\n  )\n\n  const crop = {\n    x:\n      (zoom * mediaBBoxSize.width) / 2 -\n      cropSize.width / 2 -\n      mediaBBoxSize.width * zoom * (croppedAreaPercentages.x / 100),\n    y:\n      (zoom * mediaBBoxSize.height) / 2 -\n      cropSize.height / 2 -\n      mediaBBoxSize.height * zoom * (croppedAreaPercentages.y / 100),\n  }\n\n  return { crop, zoom }\n}\n\n/**\n * Compute zoom from the croppedAreaPixels\n */\nfunction getZoomFromCroppedAreaPixels(\n  croppedAreaPixels: Area,\n  mediaSize: MediaSize,\n  cropSize: Size\n): number {\n  const mediaZoom = getMediaZoom(mediaSize)\n\n  return cropSize.height > cropSize.width\n    ? cropSize.height / (croppedAreaPixels.height * mediaZoom)\n    : cropSize.width / (croppedAreaPixels.width * mediaZoom)\n}\n\n/**\n * Compute crop and zoom from the croppedAreaPixels\n */\nexport function getInitialCropFromCroppedAreaPixels(\n  croppedAreaPixels: Area,\n  mediaSize: MediaSize,\n  rotation = 0,\n  cropSize: Size,\n  minZoom: number,\n  maxZoom: number\n): { crop: Point; zoom: number } {\n  const mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation)\n\n  const zoom = clamp(\n    getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize),\n    minZoom,\n    maxZoom\n  )\n\n  const cropZoom =\n    cropSize.height > cropSize.width\n      ? cropSize.height / croppedAreaPixels.height\n      : cropSize.width / croppedAreaPixels.width\n\n  const crop = {\n    x:\n      ((mediaNaturalBBoxSize.width - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n    y:\n      ((mediaNaturalBBoxSize.height - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) *\n      cropZoom,\n  }\n  return { crop, zoom }\n}\n\n/**\n * Return the point that is the center of point a and b\n */\nexport function getCenter(a: Point, b: Point): Point {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2,\n  }\n}\n\nexport function getRadianAngle(degreeValue: number) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\nexport function rotateSize(width: number, height: number, rotation: number): Size {\n  const rotRad = getRadianAngle(rotation)\n\n  return {\n    width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\n  }\n}\n\n/**\n * Clamp value between min and max\n */\nexport function clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n\n/**\n * Combine multiple class names into a single string.\n */\nexport function classNames(...args: (boolean | string | number | undefined | void | null)[]) {\n  return args\n    .filter((value) => {\n      if (typeof value === 'string' && value.length > 0) {\n        return true\n      }\n\n      return false\n    })\n    .join(' ')\n    .trim()\n}\n","import React from 'react'\nimport normalizeWheel from 'normalize-wheel'\nimport { Area, MediaSize, Point, Size, VideoSrc } from './types'\nimport {\n  getCropSize,\n  restrictPosition,\n  getDistanceBetweenPoints,\n  getRotationBetweenPoints,\n  computeCroppedArea,\n  getCenter,\n  getInitialCropFromCroppedAreaPixels,\n  getInitialCropFromCroppedAreaPercentages,\n  classNames,\n  clamp,\n} from './helpers'\nimport cssStyles from './styles.css'\n\nexport type CropperProps = {\n  image?: string\n  video?: string | VideoSrc[]\n  transform?: string\n  crop: Point\n  zoom: number\n  rotation: number\n  aspect: number\n  minZoom: number\n  maxZoom: number\n  cropShape: 'rect' | 'round'\n  cropSize?: Size\n  objectFit?: 'contain' | 'horizontal-cover' | 'vertical-cover'\n  showGrid?: boolean\n  zoomSpeed: number\n  zoomWithScroll?: boolean\n  onCropChange: (location: Point) => void\n  onZoomChange?: (zoom: number) => void\n  onRotationChange?: (rotation: number) => void\n  onCropComplete?: (croppedArea: Area, croppedAreaPixels: Area) => void\n  onCropAreaChange?: (croppedArea: Area, croppedAreaPixels: Area) => void\n  onCropSizeChange?: (cropSize: Size) => void\n  onInteractionStart?: () => void\n  onInteractionEnd?: () => void\n  onMediaLoaded?: (mediaSize: MediaSize) => void\n  style: {\n    containerStyle?: React.CSSProperties\n    mediaStyle?: React.CSSProperties\n    cropAreaStyle?: React.CSSProperties\n  }\n  classes: {\n    containerClassName?: string\n    mediaClassName?: string\n    cropAreaClassName?: string\n  }\n  restrictPosition: boolean\n  mediaProps: React.ImgHTMLAttributes<HTMLElement> | React.VideoHTMLAttributes<HTMLElement>\n  disableAutomaticStylesInjection?: boolean\n  initialCroppedAreaPixels?: Area\n  initialCroppedAreaPercentages?: Area\n}\n\ntype State = {\n  cropSize: Size | null\n  hasWheelJustStarted: boolean\n}\n\nconst MIN_ZOOM = 1\nconst MAX_ZOOM = 3\n\nclass Cropper extends React.Component<CropperProps, State> {\n  static defaultProps = {\n    zoom: 1,\n    rotation: 0,\n    aspect: 4 / 3,\n    maxZoom: MAX_ZOOM,\n    minZoom: MIN_ZOOM,\n    cropShape: 'rect' as const,\n    objectFit: 'contain' as const,\n    showGrid: true,\n    style: {},\n    classes: {},\n    mediaProps: {},\n    zoomSpeed: 1,\n    restrictPosition: true,\n    zoomWithScroll: true,\n  }\n\n  imageRef: HTMLImageElement | null = null\n  videoRef: HTMLVideoElement | null = null\n  containerRef: HTMLDivElement | null = null\n  styleRef: HTMLStyleElement | null = null\n  containerRect: DOMRect | null = null\n  mediaSize: MediaSize = { width: 0, height: 0, naturalWidth: 0, naturalHeight: 0 }\n  dragStartPosition: Point = { x: 0, y: 0 }\n  dragStartCrop: Point = { x: 0, y: 0 }\n  lastPinchDistance = 0\n  lastPinchRotation = 0\n  rafDragTimeout: number | null = null\n  rafPinchTimeout: number | null = null\n  wheelTimer: number | null = null\n\n  state: State = {\n    cropSize: null,\n    hasWheelJustStarted: false,\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.computeSizes)\n    if (this.containerRef) {\n      this.props.zoomWithScroll &&\n        this.containerRef.addEventListener('wheel', this.onWheel, { passive: false })\n      this.containerRef.addEventListener('gesturestart', this.preventZoomSafari)\n      this.containerRef.addEventListener('gesturechange', this.preventZoomSafari)\n    }\n\n    if (!this.props.disableAutomaticStylesInjection) {\n      this.styleRef = document.createElement('style')\n      this.styleRef.setAttribute('type', 'text/css')\n      this.styleRef.innerHTML = cssStyles\n      document.head.appendChild(this.styleRef)\n    }\n\n    // when rendered via SSR, the image can already be loaded and its onLoad callback will never be called\n    if (this.imageRef && this.imageRef.complete) {\n      this.onMediaLoad()\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.computeSizes)\n    if (this.containerRef) {\n      this.containerRef.removeEventListener('gesturestart', this.preventZoomSafari)\n      this.containerRef.removeEventListener('gesturechange', this.preventZoomSafari)\n    }\n\n    if (this.styleRef) {\n      this.styleRef.parentNode?.removeChild(this.styleRef)\n    }\n\n    this.cleanEvents()\n    this.props.zoomWithScroll && this.clearScrollEvent()\n  }\n\n  componentDidUpdate(prevProps: CropperProps) {\n    if (prevProps.rotation !== this.props.rotation) {\n      this.computeSizes()\n      this.recomputeCropPosition()\n    } else if (prevProps.aspect !== this.props.aspect) {\n      this.computeSizes()\n    } else if (prevProps.zoom !== this.props.zoom) {\n      this.recomputeCropPosition()\n    } else if (\n      prevProps.cropSize?.height !== this.props.cropSize?.height ||\n      prevProps.cropSize?.width !== this.props.cropSize?.width\n    ) {\n      this.computeSizes()\n    } else if (\n      prevProps.crop?.x !== this.props.crop?.x ||\n      prevProps.crop?.y !== this.props.crop?.y\n    ) {\n      this.emitCropAreaChange()\n    }\n    if (prevProps.zoomWithScroll !== this.props.zoomWithScroll && this.containerRef) {\n      this.props.zoomWithScroll\n        ? this.containerRef.addEventListener('wheel', this.onWheel, { passive: false })\n        : this.clearScrollEvent()\n    }\n    if (prevProps.video !== this.props.video) {\n      this.videoRef?.load()\n    }\n  }\n\n  // this is to prevent Safari on iOS >= 10 to zoom the page\n  preventZoomSafari = (e: Event) => e.preventDefault()\n\n  cleanEvents = () => {\n    document.removeEventListener('mousemove', this.onMouseMove)\n    document.removeEventListener('mouseup', this.onDragStopped)\n    document.removeEventListener('touchmove', this.onTouchMove)\n    document.removeEventListener('touchend', this.onDragStopped)\n  }\n\n  clearScrollEvent = () => {\n    if (this.containerRef) this.containerRef.removeEventListener('wheel', this.onWheel)\n    if (this.wheelTimer) {\n      clearTimeout(this.wheelTimer)\n    }\n  }\n\n  onMediaLoad = () => {\n    const cropSize = this.computeSizes()\n\n    if (cropSize) {\n      this.emitCropData()\n      this.setInitialCrop(cropSize)\n    }\n\n    if (this.props.onMediaLoaded) {\n      this.props.onMediaLoaded(this.mediaSize)\n    }\n  }\n\n  setInitialCrop = (cropSize: Size) => {\n    if (this.props.initialCroppedAreaPercentages) {\n      const { crop, zoom } = getInitialCropFromCroppedAreaPercentages(\n        this.props.initialCroppedAreaPercentages,\n        this.mediaSize,\n        this.props.rotation,\n        cropSize,\n        this.props.minZoom,\n        this.props.maxZoom\n      )\n\n      this.props.onCropChange(crop)\n      this.props.onZoomChange && this.props.onZoomChange(zoom)\n    } else if (this.props.initialCroppedAreaPixels) {\n      const { crop, zoom } = getInitialCropFromCroppedAreaPixels(\n        this.props.initialCroppedAreaPixels,\n        this.mediaSize,\n        this.props.rotation,\n        cropSize,\n        this.props.minZoom,\n        this.props.maxZoom\n      )\n\n      this.props.onCropChange(crop)\n      this.props.onZoomChange && this.props.onZoomChange(zoom)\n    }\n  }\n\n  getAspect() {\n    const { cropSize, aspect } = this.props\n    if (cropSize) {\n      return cropSize.width / cropSize.height\n    }\n    return aspect\n  }\n\n  computeSizes = () => {\n    const mediaRef = this.imageRef || this.videoRef\n\n    if (mediaRef && this.containerRef) {\n      this.containerRect = this.containerRef.getBoundingClientRect()\n      const containerAspect = this.containerRect.width / this.containerRect.height\n      const naturalWidth = this.imageRef?.naturalWidth || this.videoRef?.videoWidth || 0\n      const naturalHeight = this.imageRef?.naturalHeight || this.videoRef?.videoHeight || 0\n      const isMediaScaledDown =\n        mediaRef.offsetWidth < naturalWidth || mediaRef.offsetHeight < naturalHeight\n      const mediaAspect = naturalWidth / naturalHeight\n\n      // We do not rely on the offsetWidth/offsetHeight if the media is scaled down\n      // as the values they report are rounded. That will result in precision losses\n      // when calculating zoom. We use the fact that the media is positionned relative\n      // to the container. That allows us to use the container's dimensions\n      // and natural aspect ratio of the media to calculate accurate media size.\n      // However, for this to work, the container should not be rotated\n      let renderedMediaSize: Size\n\n      if (isMediaScaledDown) {\n        switch (this.props.objectFit) {\n          default:\n          case 'contain':\n            renderedMediaSize =\n              containerAspect > mediaAspect\n                ? {\n                    width: this.containerRect.height * mediaAspect,\n                    height: this.containerRect.height,\n                  }\n                : {\n                    width: this.containerRect.width,\n                    height: this.containerRect.width / mediaAspect,\n                  }\n            break\n          case 'horizontal-cover':\n            renderedMediaSize = {\n              width: this.containerRect.width,\n              height: this.containerRect.width / mediaAspect,\n            }\n            break\n          case 'vertical-cover':\n            renderedMediaSize = {\n              width: this.containerRect.height * mediaAspect,\n              height: this.containerRect.height,\n            }\n            break\n        }\n      } else {\n        renderedMediaSize = {\n          width: mediaRef.offsetWidth,\n          height: mediaRef.offsetHeight,\n        }\n      }\n\n      this.mediaSize = {\n        ...renderedMediaSize,\n        naturalWidth,\n        naturalHeight,\n      }\n\n      const cropSize = this.props.cropSize\n        ? this.props.cropSize\n        : getCropSize(\n            this.mediaSize.width,\n            this.mediaSize.height,\n            this.containerRect.width,\n            this.containerRect.height,\n            this.props.aspect,\n            this.props.rotation\n          )\n\n      if (\n        this.state.cropSize?.height !== cropSize.height ||\n        this.state.cropSize?.width !== cropSize.width\n      ) {\n        this.props.onCropSizeChange && this.props.onCropSizeChange(cropSize)\n      }\n      this.setState({ cropSize }, this.recomputeCropPosition)\n\n      return cropSize\n    }\n  }\n\n  static getMousePoint = (e: MouseEvent | React.MouseEvent) => ({\n    x: Number(e.clientX),\n    y: Number(e.clientY),\n  })\n\n  static getTouchPoint = (touch: Touch | React.Touch) => ({\n    x: Number(touch.clientX),\n    y: Number(touch.clientY),\n  })\n\n  onMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.preventDefault()\n    document.addEventListener('mousemove', this.onMouseMove)\n    document.addEventListener('mouseup', this.onDragStopped)\n    this.onDragStart(Cropper.getMousePoint(e))\n  }\n\n  onMouseMove = (e: MouseEvent) => this.onDrag(Cropper.getMousePoint(e))\n\n  onTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\n    document.addEventListener('touchmove', this.onTouchMove, { passive: false }) // iOS 11 now defaults to passive: true\n    document.addEventListener('touchend', this.onDragStopped)\n    if (e.touches.length === 2) {\n      this.onPinchStart(e)\n    } else if (e.touches.length === 1) {\n      this.onDragStart(Cropper.getTouchPoint(e.touches[0]))\n    }\n  }\n\n  onTouchMove = (e: TouchEvent) => {\n    // Prevent whole page from scrolling on iOS.\n    e.preventDefault()\n    if (e.touches.length === 2) {\n      this.onPinchMove(e)\n    } else if (e.touches.length === 1) {\n      this.onDrag(Cropper.getTouchPoint(e.touches[0]))\n    }\n  }\n\n  onDragStart = ({ x, y }: Point) => {\n    this.dragStartPosition = { x, y }\n    this.dragStartCrop = { ...this.props.crop }\n    this.props.onInteractionStart?.()\n  }\n\n  onDrag = ({ x, y }: Point) => {\n    if (this.rafDragTimeout) window.cancelAnimationFrame(this.rafDragTimeout)\n\n    this.rafDragTimeout = window.requestAnimationFrame(() => {\n      if (!this.state.cropSize) return\n      if (x === undefined || y === undefined) return\n      const offsetX = x - this.dragStartPosition.x\n      const offsetY = y - this.dragStartPosition.y\n      const requestedPosition = {\n        x: this.dragStartCrop.x + offsetX,\n        y: this.dragStartCrop.y + offsetY,\n      }\n\n      const newPosition = this.props.restrictPosition\n        ? restrictPosition(\n            requestedPosition,\n            this.mediaSize,\n            this.state.cropSize,\n            this.props.zoom,\n            this.props.rotation\n          )\n        : requestedPosition\n      this.props.onCropChange(newPosition)\n    })\n  }\n\n  onDragStopped = () => {\n    this.cleanEvents()\n    this.emitCropData()\n    this.props.onInteractionEnd?.()\n  }\n\n  onPinchStart(e: React.TouchEvent<HTMLDivElement>) {\n    const pointA = Cropper.getTouchPoint(e.touches[0])\n    const pointB = Cropper.getTouchPoint(e.touches[1])\n    this.lastPinchDistance = getDistanceBetweenPoints(pointA, pointB)\n    this.lastPinchRotation = getRotationBetweenPoints(pointA, pointB)\n    this.onDragStart(getCenter(pointA, pointB))\n  }\n\n  onPinchMove(e: TouchEvent) {\n    const pointA = Cropper.getTouchPoint(e.touches[0])\n    const pointB = Cropper.getTouchPoint(e.touches[1])\n    const center = getCenter(pointA, pointB)\n    this.onDrag(center)\n\n    if (this.rafPinchTimeout) window.cancelAnimationFrame(this.rafPinchTimeout)\n    this.rafPinchTimeout = window.requestAnimationFrame(() => {\n      const distance = getDistanceBetweenPoints(pointA, pointB)\n      const newZoom = this.props.zoom * (distance / this.lastPinchDistance)\n      this.setNewZoom(newZoom, center)\n      this.lastPinchDistance = distance\n\n      const rotation = getRotationBetweenPoints(pointA, pointB)\n      const newRotation = this.props.rotation + (rotation - this.lastPinchRotation)\n      this.props.onRotationChange && this.props.onRotationChange(newRotation)\n      this.lastPinchRotation = rotation\n    })\n  }\n\n  onWheel = (e: WheelEvent) => {\n    e.preventDefault()\n    const point = Cropper.getMousePoint(e)\n    const { pixelY } = normalizeWheel(e)\n    const newZoom = this.props.zoom - (pixelY * this.props.zoomSpeed) / 200\n    this.setNewZoom(newZoom, point)\n\n    if (!this.state.hasWheelJustStarted) {\n      this.setState({ hasWheelJustStarted: true }, () => this.props.onInteractionStart?.())\n    }\n\n    if (this.wheelTimer) {\n      clearTimeout(this.wheelTimer)\n    }\n    this.wheelTimer = window.setTimeout(\n      () => this.setState({ hasWheelJustStarted: false }, () => this.props.onInteractionEnd?.()),\n      250\n    )\n  }\n\n  getPointOnContainer = ({ x, y }: Point) => {\n    if (!this.containerRect) {\n      throw new Error('The Cropper is not mounted')\n    }\n    return {\n      x: this.containerRect.width / 2 - (x - this.containerRect.left),\n      y: this.containerRect.height / 2 - (y - this.containerRect.top),\n    }\n  }\n\n  getPointOnMedia = ({ x, y }: Point) => {\n    const { crop, zoom } = this.props\n    return {\n      x: (x + crop.x) / zoom,\n      y: (y + crop.y) / zoom,\n    }\n  }\n\n  setNewZoom = (zoom: number, point: Point) => {\n    if (!this.state.cropSize || !this.props.onZoomChange) return\n\n    const zoomPoint = this.getPointOnContainer(point)\n    const zoomTarget = this.getPointOnMedia(zoomPoint)\n    const newZoom = clamp(zoom, this.props.minZoom, this.props.maxZoom)\n    const requestedPosition = {\n      x: zoomTarget.x * newZoom - zoomPoint.x,\n      y: zoomTarget.y * newZoom - zoomPoint.y,\n    }\n    const newPosition = this.props.restrictPosition\n      ? restrictPosition(\n          requestedPosition,\n          this.mediaSize,\n          this.state.cropSize,\n          newZoom,\n          this.props.rotation\n        )\n      : requestedPosition\n\n    this.props.onCropChange(newPosition)\n    this.props.onZoomChange(newZoom)\n  }\n\n  getCropData = () => {\n    if (!this.state.cropSize) {\n      return null\n    }\n\n    // this is to ensure the crop is correctly restricted after a zoom back (https://github.com/ricardo-ch/react-easy-crop/issues/6)\n    const restrictedPosition = this.props.restrictPosition\n      ? restrictPosition(\n          this.props.crop,\n          this.mediaSize,\n          this.state.cropSize,\n          this.props.zoom,\n          this.props.rotation\n        )\n      : this.props.crop\n    return computeCroppedArea(\n      restrictedPosition,\n      this.mediaSize,\n      this.state.cropSize,\n      this.getAspect(),\n      this.props.zoom,\n      this.props.rotation,\n      this.props.restrictPosition\n    )\n  }\n\n  emitCropData = () => {\n    const cropData = this.getCropData()\n    if (!cropData) return\n\n    const { croppedAreaPercentages, croppedAreaPixels } = cropData\n    if (this.props.onCropComplete) {\n      this.props.onCropComplete(croppedAreaPercentages, croppedAreaPixels)\n    }\n\n    if (this.props.onCropAreaChange) {\n      this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels)\n    }\n  }\n\n  emitCropAreaChange = () => {\n    const cropData = this.getCropData()\n    if (!cropData) return\n\n    const { croppedAreaPercentages, croppedAreaPixels } = cropData\n    if (this.props.onCropAreaChange) {\n      this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels)\n    }\n  }\n\n  recomputeCropPosition = () => {\n    if (!this.state.cropSize) return\n\n    const newPosition = this.props.restrictPosition\n      ? restrictPosition(\n          this.props.crop,\n          this.mediaSize,\n          this.state.cropSize,\n          this.props.zoom,\n          this.props.rotation\n        )\n      : this.props.crop\n\n    this.props.onCropChange(newPosition)\n    this.emitCropData()\n  }\n\n  render() {\n    const {\n      image,\n      video,\n      mediaProps,\n      transform,\n      crop: { x, y },\n      rotation,\n      zoom,\n      cropShape,\n      showGrid,\n      style: { containerStyle, cropAreaStyle, mediaStyle },\n      classes: { containerClassName, cropAreaClassName, mediaClassName },\n      objectFit,\n    } = this.props\n\n    return (\n      <div\n        onMouseDown={this.onMouseDown}\n        onTouchStart={this.onTouchStart}\n        ref={(el) => (this.containerRef = el)}\n        data-testid=\"container\"\n        style={containerStyle}\n        className={classNames('reactEasyCrop_Container', containerClassName)}\n      >\n        {image ? (\n          <img\n            alt=\"\"\n            className={classNames(\n              'reactEasyCrop_Image',\n              objectFit === 'contain' && 'reactEasyCrop_Contain',\n              objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal',\n              objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical',\n              mediaClassName\n            )}\n            {...(mediaProps as React.ImgHTMLAttributes<HTMLElement>)}\n            src={image}\n            ref={(el: HTMLImageElement) => (this.imageRef = el)}\n            style={{\n              ...mediaStyle,\n              transform:\n                transform || `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${zoom})`,\n            }}\n            onLoad={this.onMediaLoad}\n          />\n        ) : (\n          video && (\n            <video\n              autoPlay\n              loop\n              muted={true}\n              className={classNames(\n                'reactEasyCrop_Video',\n                objectFit === 'contain' && 'reactEasyCrop_Contain',\n                objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal',\n                objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical',\n                mediaClassName\n              )}\n              {...mediaProps}\n              ref={(el: HTMLVideoElement) => (this.videoRef = el)}\n              onLoadedMetadata={this.onMediaLoad}\n              style={{\n                ...mediaStyle,\n                transform:\n                  transform || `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${zoom})`,\n              }}\n              controls={false}\n            >\n              {(Array.isArray(video) ? video : [{ src: video }]).map((item) => (\n                <source key={item.src} {...item} />\n              ))}\n            </video>\n          )\n        )}\n        {this.state.cropSize && (\n          <div\n            style={{\n              ...cropAreaStyle,\n              width: this.state.cropSize.width,\n              height: this.state.cropSize.height,\n            }}\n            data-testid=\"cropper\"\n            className={classNames(\n              'reactEasyCrop_CropArea',\n              cropShape === 'round' && 'reactEasyCrop_CropAreaRound',\n              showGrid && 'reactEasyCrop_CropAreaGrid',\n              cropAreaClassName\n            )}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Cropper\n"]},"metadata":{},"sourceType":"module"}