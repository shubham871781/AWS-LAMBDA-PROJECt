{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Documents\\\\shubhamcode\\\\TodayNewwork27admin\\\\src\\\\commocomponent\\\\FormFields\\\\TextField\\\\TextField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Field, useField } from \"formik\";\nimport { TextWrapperStyled } from \"./TextField.style\";\nimport { ErrorMessage } from \"../../ErrorMessage/index\";\nimport HelpText from \"../../HelpText/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TextField = ({\n  label,\n  type,\n  name,\n  placeholder,\n  disabled,\n  showPasswordToggleButton,\n  togglePasswordVisibility,\n  helpText,\n  optional,\n  className,\n  step,\n  handleChange\n}) => {\n  _s();\n\n  const [field, meta, helpers] = useField(name);\n  const {\n    onBlur\n  } = field;\n  const {\n    value,\n    error,\n    touched\n  } = meta;\n  const {\n    setValue\n  } = helpers;\n  let [active, setActive] = useState(\"inactive\");\n  let [labelWidth, setLabelWidth] = useState(\"inactive\");\n  let [showEyeIcon, setShowEyeIcon] = useState(true);\n  const ref = useRef(null);\n\n  function handleLabelWidth() {\n    setLabelWidth(ref.current.offsetWidth + 6);\n  }\n\n  function handleBlur(e) {\n    const value = e.target.value;\n    let active = value ? \"active\" : \"inactive\";\n    value ? handleLabelWidth() : setLabelWidth(0);\n    setActive(active);\n    onBlur(e);\n  }\n\n  function handleFocus() {\n    handleLabelWidth();\n    setActive(\"active\");\n  }\n\n  function handleTogglePassword() {\n    setShowEyeIcon(showEyeIcon => !showEyeIcon);\n    togglePasswordVisibility();\n  }\n\n  function onChange(e) {\n    setValue(e.target.value, false);\n\n    if (handleChange) {\n      handleChange(e);\n    }\n  }\n\n  useEffect(() => {\n    if (value) {\n      let active = value ? \"active\" : \"inactive\";\n      handleLabelWidth();\n      setActive(active);\n    }\n  }, [active, name, value]);\n  return /*#__PURE__*/_jsxDEV(TextWrapperStyled, {\n    className: `${error && touched && \"has-error\"} ${active} ${className}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        type: type,\n        step: step,\n        name: name,\n        id: name,\n        placeholder: placeholder,\n        disabled: disabled,\n        onBlur: e => {\n          handleBlur(e);\n        },\n        onFocus: e => {\n          handleFocus(e.currentTarget.value);\n        },\n        onChange: e => onChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        ref: ref,\n        htmlFor: name,\n        children: [label, optional && ` (optional)`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), showPasswordToggleButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"show-password\",\n        onClick: handleTogglePassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        \"aria-hidden\": \"true\",\n        children: /*#__PURE__*/_jsxDEV(\"legend\", {\n          style: {\n            width: labelWidth\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u200B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      error: error,\n      touched: touched\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), helpText && (!error || !touched) && /*#__PURE__*/_jsxDEV(HelpText, {\n      text: helpText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 44\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TextField, \"LzDlHuqOil9N3GWUEAG1B479GQ8=\", false, function () {\n  return [useField];\n});\n\n_c = TextField;\nTextField.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  disabled: PropTypes.bool,\n  togglePasswordVisibility: PropTypes.func,\n  showPasswordToggleButton: PropTypes.bool,\n  helpText: PropTypes.string,\n  optional: PropTypes.bool,\n  className: PropTypes.string,\n  step: PropTypes.string,\n  handleChange: PropTypes.func\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"TextField\");","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Documents/shubhamcode/TodayNewwork27admin/src/commocomponent/FormFields/TextField/TextField.js"],"names":["React","useState","useEffect","useRef","PropTypes","Field","useField","TextWrapperStyled","ErrorMessage","HelpText","TextField","label","type","name","placeholder","disabled","showPasswordToggleButton","togglePasswordVisibility","helpText","optional","className","step","handleChange","field","meta","helpers","onBlur","value","error","touched","setValue","active","setActive","labelWidth","setLabelWidth","showEyeIcon","setShowEyeIcon","ref","handleLabelWidth","current","offsetWidth","handleBlur","e","target","handleFocus","handleTogglePassword","onChange","currentTarget","width","propTypes","string","isRequired","bool","func"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,QAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,OAAO,MAAMC,SAAS,GAAG,CAAC;AACxBC,EAAAA,KADwB;AAExBC,EAAAA,IAFwB;AAGxBC,EAAAA,IAHwB;AAIxBC,EAAAA,WAJwB;AAKxBC,EAAAA,QALwB;AAMxBC,EAAAA,wBANwB;AAOxBC,EAAAA,wBAPwB;AAQxBC,EAAAA,QARwB;AASxBC,EAAAA,QATwB;AAUxBC,EAAAA,SAVwB;AAWxBC,EAAAA,IAXwB;AAYxBC,EAAAA;AAZwB,CAAD,KAanB;AAAA;;AACJ,QAAM,CAACC,KAAD,EAAQC,IAAR,EAAcC,OAAd,IAAyBnB,QAAQ,CAACO,IAAD,CAAvC;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAaH,KAAnB;AACA,QAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,MAA4BL,IAAlC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAeL,OAArB;AACA,MAAI,CAACM,MAAD,EAASC,SAAT,IAAsB/B,QAAQ,CAAC,UAAD,CAAlC;AACA,MAAI,CAACgC,UAAD,EAAaC,aAAb,IAA8BjC,QAAQ,CAAC,UAAD,CAA1C;AACA,MAAI,CAACkC,WAAD,EAAcC,cAAd,IAAgCnC,QAAQ,CAAC,IAAD,CAA5C;AAEA,QAAMoC,GAAG,GAAGlC,MAAM,CAAC,IAAD,CAAlB;;AAEA,WAASmC,gBAAT,GAA4B;AAC1BJ,IAAAA,aAAa,CAACG,GAAG,CAACE,OAAJ,CAAYC,WAAZ,GAA0B,CAA3B,CAAb;AACD;;AAED,WAASC,UAAT,CAAoBC,CAApB,EAAuB;AACrB,UAAMf,KAAK,GAAGe,CAAC,CAACC,MAAF,CAAShB,KAAvB;AACA,QAAII,MAAM,GAAGJ,KAAK,GAAG,QAAH,GAAc,UAAhC;AACAA,IAAAA,KAAK,GAAGW,gBAAgB,EAAnB,GAAwBJ,aAAa,CAAC,CAAD,CAA1C;AACAF,IAAAA,SAAS,CAACD,MAAD,CAAT;AACAL,IAAAA,MAAM,CAACgB,CAAD,CAAN;AACD;;AAED,WAASE,WAAT,GAAuB;AACrBN,IAAAA,gBAAgB;AAChBN,IAAAA,SAAS,CAAC,QAAD,CAAT;AACD;;AAED,WAASa,oBAAT,GAAgC;AAC9BT,IAAAA,cAAc,CAACD,WAAW,IAAI,CAACA,WAAjB,CAAd;AACAlB,IAAAA,wBAAwB;AACzB;;AAED,WAAS6B,QAAT,CAAkBJ,CAAlB,EAAqB;AACnBZ,IAAAA,QAAQ,CAACY,CAAC,CAACC,MAAF,CAAShB,KAAV,EAAiB,KAAjB,CAAR;;AACA,QAAIL,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACoB,CAAD,CAAZ;AACD;AACF;;AAEDxC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,KAAJ,EAAW;AACT,UAAII,MAAM,GAAGJ,KAAK,GAAG,QAAH,GAAc,UAAhC;AACAW,MAAAA,gBAAgB;AAChBN,MAAAA,SAAS,CAACD,MAAD,CAAT;AACD;AACF,GANQ,EAMN,CAACA,MAAD,EAASlB,IAAT,EAAec,KAAf,CANM,CAAT;AAQA,sBACE,QAAC,iBAAD;AACE,IAAA,SAAS,EAAG,GAAEC,KAAK,IAAIC,OAAT,IAAoB,WAAY,IAAGE,MAAO,IAAGX,SAAU,EADvE;AAAA,4BAGE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,IAAI,EAAER,IADR;AAEE,QAAA,IAAI,EAAES,IAFR;AAGE,QAAA,IAAI,EAAER,IAHR;AAIE,QAAA,EAAE,EAAEA,IAJN;AAKE,QAAA,WAAW,EAAEC,WALf;AAME,QAAA,QAAQ,EAAEC,QANZ;AAOE,QAAA,MAAM,EAAE2B,CAAC,IAAI;AACXD,UAAAA,UAAU,CAACC,CAAD,CAAV;AACD,SATH;AAUE,QAAA,OAAO,EAAEA,CAAC,IAAI;AACZE,UAAAA,WAAW,CAACF,CAAC,CAACK,aAAF,CAAgBpB,KAAjB,CAAX;AACD,SAZH;AAaE,QAAA,QAAQ,EAAEe,CAAC,IAAII,QAAQ,CAACJ,CAAD;AAbzB;AAAA;AAAA;AAAA;AAAA,cADF,eAgBE;AAAO,QAAA,GAAG,EAAEL,GAAZ;AAAiB,QAAA,OAAO,EAAExB,IAA1B;AAAA,mBACGF,KADH,EAEGQ,QAAQ,IAAK,aAFhB;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBF,EAoBGH,wBAAwB,iBACvB;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAC,eAFZ;AAGE,QAAA,OAAO,EAAE6B;AAHX;AAAA;AAAA;AAAA;AAAA,cArBJ,eA6BE;AAAU,uBAAY,MAAtB;AAAA,+BACE;AAAQ,UAAA,KAAK,EAAE;AAAEG,YAAAA,KAAK,EAAEf;AAAT,WAAf;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAsCE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEL,KAArB;AAA4B,MAAA,OAAO,EAAEC;AAArC;AAAA;AAAA;AAAA;AAAA,YAtCF,EAuCGX,QAAQ,KAAK,CAACU,KAAD,IAAU,CAACC,OAAhB,CAAR,iBAAoC,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEX;AAAhB;AAAA;AAAA;AAAA;AAAA,YAvCvC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2CD,CAxGM;;GAAMR,S;UAcoBJ,Q;;;KAdpBI,S;AAyGbA,SAAS,CAACuC,SAAV,GAAsB;AACpBtC,EAAAA,KAAK,EAAEP,SAAS,CAAC8C,MAAV,CAAiBC,UADJ;AAEpBvC,EAAAA,IAAI,EAAER,SAAS,CAAC8C,MAFI;AAGpBrC,EAAAA,IAAI,EAAET,SAAS,CAAC8C,MAAV,CAAiBC,UAHH;AAIpBrC,EAAAA,WAAW,EAAEV,SAAS,CAAC8C,MAJH;AAKpBnC,EAAAA,QAAQ,EAAEX,SAAS,CAACgD,IALA;AAMpBnC,EAAAA,wBAAwB,EAAEb,SAAS,CAACiD,IANhB;AAOpBrC,EAAAA,wBAAwB,EAAEZ,SAAS,CAACgD,IAPhB;AAQpBlC,EAAAA,QAAQ,EAAEd,SAAS,CAAC8C,MARA;AASpB/B,EAAAA,QAAQ,EAAEf,SAAS,CAACgD,IATA;AAUpBhC,EAAAA,SAAS,EAAEhB,SAAS,CAAC8C,MAVD;AAWpB7B,EAAAA,IAAI,EAAEjB,SAAS,CAAC8C,MAXI;AAYpB5B,EAAAA,YAAY,EAAElB,SAAS,CAACiD;AAZJ,CAAtB","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Field, useField } from \"formik\";\nimport { TextWrapperStyled } from \"./TextField.style\";\nimport { ErrorMessage } from \"../../ErrorMessage/index\";\nimport HelpText from \"../../HelpText/index\";\n\nexport const TextField = ({\n  label,\n  type,\n  name,\n  placeholder,\n  disabled,\n  showPasswordToggleButton,\n  togglePasswordVisibility,\n  helpText,\n  optional,\n  className,\n  step,\n  handleChange\n}) => {\n  const [field, meta, helpers] = useField(name);\n  const { onBlur } = field;\n  const { value, error, touched } = meta;\n  const { setValue } = helpers;\n  let [active, setActive] = useState(\"inactive\");\n  let [labelWidth, setLabelWidth] = useState(\"inactive\");\n  let [showEyeIcon, setShowEyeIcon] = useState(true);\n\n  const ref = useRef(null);\n\n  function handleLabelWidth() {\n    setLabelWidth(ref.current.offsetWidth + 6);\n  }\n\n  function handleBlur(e) {\n    const value = e.target.value;\n    let active = value ? \"active\" : \"inactive\";\n    value ? handleLabelWidth() : setLabelWidth(0);\n    setActive(active);\n    onBlur(e);\n  }\n\n  function handleFocus() {\n    handleLabelWidth();\n    setActive(\"active\");\n  }\n\n  function handleTogglePassword() {\n    setShowEyeIcon(showEyeIcon => !showEyeIcon);\n    togglePasswordVisibility();\n  }\n\n  function onChange(e) {\n    setValue(e.target.value, false);\n    if (handleChange) {\n      handleChange(e);\n    }\n  }\n\n  useEffect(() => {\n    if (value) {\n      let active = value ? \"active\" : \"inactive\";\n      handleLabelWidth();\n      setActive(active);\n    }\n  }, [active, name, value]);\n\n  return (\n    <TextWrapperStyled\n      className={`${error && touched && \"has-error\"} ${active} ${className}`}\n    >\n      <div className=\"field-wrapper\">\n        <Field\n          type={type}\n          step={step}\n          name={name}\n          id={name}\n          placeholder={placeholder}\n          disabled={disabled}\n          onBlur={e => {\n            handleBlur(e);\n          }}\n          onFocus={e => {\n            handleFocus(e.currentTarget.value);\n          }}\n          onChange={e => onChange(e)}\n        />\n        <label ref={ref} htmlFor={name}>\n          {label}\n          {optional && ` (optional)`}\n        </label>\n        {showPasswordToggleButton && (\n          <button\n            type=\"button\"\n            className=\"show-password\"\n            onClick={handleTogglePassword}\n          >\n           \n          </button>\n        )}\n        <fieldset aria-hidden=\"true\">\n          <legend style={{ width: labelWidth }}>\n            <span>​</span>\n          </legend>\n        </fieldset>\n      </div>\n      <ErrorMessage error={error} touched={touched} />\n      {helpText && (!error || !touched) && <HelpText text={helpText} />}\n    </TextWrapperStyled>\n  );\n};\nTextField.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  disabled: PropTypes.bool,\n  togglePasswordVisibility: PropTypes.func,\n  showPasswordToggleButton: PropTypes.bool,\n  helpText: PropTypes.string,\n  optional: PropTypes.bool,\n  className: PropTypes.string,\n  step: PropTypes.string,\n  handleChange: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}